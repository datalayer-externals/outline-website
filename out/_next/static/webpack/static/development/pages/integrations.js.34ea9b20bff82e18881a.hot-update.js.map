{"version":3,"file":"static/webpack/static/development/pages/integrations.js.34ea9b20bff82e18881a.hot-update.js","sources":["webpack:///./pages/integrations.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { filter, find } from \"lodash\";\nimport Card from \"components/Card\";\nimport IntegrationsMenu from \"components/IntegrationsMenu\";\nimport Layout from \"components/Layout\";\nimport content from \"data/integrations.json\";\nimport { colors, spacing } from \"theme\";\n\nexport default function Integrations() {\n  const [query, setQuery] = React.useState(\"\");\n\n  const normalizedQuery = query.toLowerCase().trim();\n  const results = filter(content, (integration) =>\n    integration.slug.toLowerCase().includes(normalizedQuery) ||\n    integration.description.toLowerCase().includes(normalizedQuery)\n  );\n\n  return (\n    <Layout\n      title=\"Integrations\"\n      background=\"#F4F7FA\"\n      hero=\"Outline is extensible and designed to integrate with your existing\n      workflow and tools. If you can’t find the integration you’re\n      after, reach out – we are adding new applications all the time.\"\n      sidebar={<IntegrationsMenu />}\n    >\n      <input\n        type=\"search\"\n        value={query}\n        placeholder=\"Search…\"\n        onChange={(ev) => setQuery(ev.currentTarget.value)}\n        className=\"search\"\n      />\n\n      {query ? (\n        <>\n          <h2>Results</h2>\n          <div className=\"pure-g cards\">\n            {query &&\n              results.map((integration) => (\n                <div className=\"pure-u-1 pure-u-md-1-2\" key={integration.slug}>\n                  <Card\n                    title={\n                      <>\n                        <img\n                          className=\"integration-icon\"\n                          src={`/images/integrations/${integration.slug}.png`}\n                        />\n                        <div>{integration.name}</div>\n                      </>\n                    }\n                    description={\n                      <>{integration.summary || integration.description}.</>\n                    }\n                  />\n                </div>\n              ))}\n            {results.length === 0 && (\n              <div className=\"pure-u-1 pure-u-md-1-2\">\n                <Card\n                  title=\"\"\n                  description={<>Want to suggest a new integration?</>}\n                />\n              </div>\n            )}\n          </div>\n        </>\n      ) : (\n          <>\n            <h2>Featured</h2>\n            <div className=\"pure-g cards\">\n              {[\"slack\", \"google-docs\", \"alfred\", \"figma\"].map((slug) => {\n                const integration = find(content, { slug });\n\n                return (\n                  <div className=\"pure-u-1 pure-u-md-1-2\" key={slug}>\n                    <Card\n                      title={\n                        <>\n                          <img\n                            className=\"integration-icon\"\n                            src={`/images/integrations/${integration.slug}.png`}\n                          />\n                          <div>{integration.name}</div>\n                        </>\n                      }\n                      description={\n                        <>{integration.summary || integration.description}.</>\n                      }\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        )}\n\n      <style jsx>\n        {`\n          .search {\n            width: 100%;\n            height: 32px;\n            border-radius: 4px;\n            border: 0;\n            padding: ${spacing.large};\n            background: ${colors.lightGrey};\n            font-size: 16px;\n            margin: 16px 0;\n          }\n\n          .cards {\n            margin: 0 -1rem;\n          }\n\n          .integration-icon {\n            width: 60px;\n            height: 60px;\n            margin-bottom: 1em;\n          }\n        `}\n      </style>\n    </Layout>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AA1EA;AAAA;AAAA;AAAA;AAyGA;;;;A","sourceRoot":""}